<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.four.study.course.map.CourseMapper">
	
	<resultMap type="HashMap" id="courseMap">
		<id column = "count" property="count"/>
		<id column = "sub" property="sub"/>
	</resultMap>

	<select id="courseSelectList"
		resultType="co.four.study.course.service.CourseVO">
		SELECT *
		FROM COURSES
		WHERE 1=1
		<if test="courseMainCategory != null">
			AND COURSE_MAIN_CATEGORY = LOWER(#{courseMainCategory})
		</if>
		<if test="courseSubCategory != null">
			AND COURSE_SUB_CATEGORY = LOWER(#{courseSubCategory})
		</if>
		<if test="courseGrade != null">
			AND COURSE_GRADE = LOWER(#{courseGrade})
		</if>
	</select>

	<select id="courseSelect"
		resultType="co.four.study.course.service.CourseVO">
		SELECT *
		FROM COURSES
		<if test="courseId != null">
			WHERE COURSE_ID = #{courseId}
		</if>
		<if test="courseName != null and courseScript != null and courseId == null">
			WHERE COURSE_NAME = #{courseName} AND COURSE_SCRIPT = #{courseScript}
		</if>
	</select>

	<select id="courseReviewSelect"
		resultType="co.four.study.course.service.CourseVO">
		SELECT A.*, B.*
		FROM COURSES A,
		(SELECT COURSE_ID, ROUND(SUM(REVIEW_STARS)/COUNT(REVIEW_STARS)) COURSE_STARS
		FROM REVIEWS
		WHERE COURSE_ID = #{courseId}
		GROUP BY COURSE_ID) B
		WHERE A.COURSE_ID = B.COURSE_ID(+)
		AND A.COURSE_ID = #{courseId}
	</select>

	<insert id="courseInsert"
		parameterType="co.four.study.course.service.CourseVO">
		<selectKey keyProperty="courseId" resultType="int"
			order="BEFORE">
			SELECT NVL(MAX(COURSE_ID), 0) + 1 AS COURSE_ID FROM COURSES
		</selectKey>
		INSERT INTO COURSES
		VALUES (#{courseId}, #{courseName},
		#{courseScript}, #{coursePrice}, #{courseMainCategory},
		#{courseSubCategory}, #{courseTeacher}, #{courseGrade}, #{courseImg})
	</insert>

	<update id="courseUpdate"
		parameterType="co.four.study.course.service.CourseVO">
		UPDATE COURSES
		<set>
			<if test="courseName != null">COURSE_NAME = #{courseName},</if>
			<if test="coursePrice != -1">COURSE_PRICE = #{coursePrice},</if>
			<if test="courseMainCategory != null">COURSE_MAIN_CATEGORY = #{courseMainCategory},</if>
			<if test="courseSubCategory != null">COURSE_SUB_CATEGORY = #{courseSubCategory},</if>
			<if test="courseTeacher != null">COURSE_TEACHER = #{courseTeacher},</if>
			<if test="courseGrade != null">COURSE_GRADE = #{courseGrade},</if>
			<if test="courseGrade != null">COURSE_SCRIPT = #{courseScript},</if>
			<if test="courseImg != null and courseImg != 'delete'">COURSE_IMG = #{courseImg},</if>
			<if test="courseImg == 'delete'">COURSE_IMG = NULL</if>
		</set>
		WHERE COURSE_ID = #{courseId}
	</update>

	<delete id="courseDelete"
		parameterType="co.four.study.course.service.CourseVO">
		DELETE FROM COURSES
		WHERE COURSE_ID = #{courseId}
	</delete>

	<select id="courseSubCategory"
		resultType="co.four.study.course.service.CourseVO">
		SELECT UPPER(COURSE_SUB_CATEGORY) COURSE_SUB_CATEGORY,
		COUNT(1) AS SUB_CATEGORY_COUNT
		FROM COURSES
		WHERE COURSE_MAIN_CATEGORY =
		LOWER(#{courseMainCategory})
		GROUP BY COURSE_SUB_CATEGORY
	</select>

	<select id="courseMainCategory" resultType="map">
		SELECT
		UPPER(COURSE_MAIN_CATEGORY) COURSE_MAIN_CATEGORY
		FROM COURSES
		GROUP BY
		COURSE_MAIN_CATEGORY
	</select>

	<select id="courseTotalCount" resultType="int">
		SELECT COUNT(1) FROM COURSES
		WHERE 1=1
		<if test="courseMainCategory != null">
			AND COURSE_MAIN_CATEGORY = LOWER(#{courseMainCategory})
		</if>
		<if test="courseSubCategory != null">
			AND COURSE_SUB_CATEGORY = LOWER(#{courseSubCategory})
		</if>
		<if test="courseGrade != null">
			AND COURSE_GRADE = LOWER(#{courseGrade})
		</if>
		<if test="courseName != null">
			AND COURSE_NAME LIKE '%' || #{courseName} || '%'
		</if>
	</select>

	<select id="coursePagingList"
		resultType="co.four.study.course.service.CourseVO">
		SELECT T.*, B.*
		FROM (SELECT ROWNUM RNM, A.*
		FROM (SELECT * FROM COURSES
		WHERE 1=1
		<if test="courseMainCategory != null">
			AND COURSE_MAIN_CATEGORY = LOWER(#{courseMainCategory})
		</if>
		<if test="courseSubCategory != null">
			AND COURSE_SUB_CATEGORY = LOWER(#{courseSubCategory})
		</if>
		<if test="courseGrade != null">
			AND COURSE_GRADE = LOWER(#{courseGrade})
		</if>
		<if test="courseName != null">
			AND COURSE_NAME LIKE '%' || #{courseName} || '%'
		</if>
		ORDER BY COURSE_ID) A
		) T
		LEFT JOIN
		(SELECT COURSE_ID,
		ROUND(SUM(REVIEW_STARS)/COUNT(REVIEW_STARS)) COURSE_STARS
		FROM REVIEWS
		GROUP BY COURSE_ID) B
		ON T.COURSE_ID = B.COURSE_ID
		WHERE RNM BETWEEN
		#{start} AND #{end}
	</select>
	
	<select id="itcourselist" resultType="co.four.study.course.service.CourseVO">
		SELECT * FROM COURSES WHERE COURSE_MAIN_CATEGORY = 'it'
	</select>
	
	<select id="itcourseSub" resultType="co.four.study.course.service.CourseVO">
		SELECT * FROM COURSES WHERE COURSE_SUB_CATEGORY = #{courseSubCategory}
	</select>
	
	<select id="packageCourseList" resultType="co.four.study.course.service.CourseVO" parameterType="co.four.study.packageCourse.service.PackageCourseVO">
		SELECT c.course_id, c.course_name, c.course_price,c.course_teacher
		FROM PACKAGES_COURSES p join courses c on p.course_id = c.course_id
		WHERE PACKAGE_ID = #{packageId}
	</select>
	
	
	<select id="ListNotInPackage" resultType="co.four.study.course.service.CourseVO" parameterType="co.four.study.packages.service.PackageVO">
		SELECT *
		FROM COURSES
		WHERE COURSE_MAIN_CATEGORY = #{packageCategory}
		AND COURSE_ID NOT IN(
		SELECT COURSE_ID 
		FROM PACKAGES_COURSES 
		WHERE PACKAGES_COURSES.PACKAGE_ID = #{packageId}
		)
		ORDER BY COURSE_SUB_CATEGORY
	</select>
	
	<select id="itCourse" resultMap="courseMap">
		SELECT COUNT(*) AS COUNT,COURSE_SUB_CATEGORY AS SUB 
		FROM COURSES 
		WHERE COURSE_MAIN_CATEGORY='it' 
		GROUP BY COURSE_SUB_CATEGORY 
		ORDER BY COUNT(*) DESC
	</select>
	
	<select id="hotCourseList" resultType="co.four.study.course.service.CourseVO">
		SELECT * FROM
		(SELECT C.COURSE_ID, C.COURSE_NAME, C.COURSE_PRICE,C.COURSE_IMG
		FROM MEMBERS_COURSES MC JOIN COURSES C ON C.COURSE_ID = MC.COURSE_ID
		GROUP BY C.COURSE_ID, C.COURSE_NAME,C.COURSE_PRICE,C.COURSE_IMG
		ORDER BY COUNT(*) DESC, C.COURSE_ID)
		WHERE ROWNUM <![CDATA[<=]]> 4
	</select>
	
	<select id="reviewCourseList" resultType="co.four.study.course.service.CourseVO">
		SELECT * FROM
		(SELECT C.COURSE_ID, C.COURSE_NAME, C.COURSE_PRICE,C.COURSE_IMG
		FROM REVIEWS R JOIN COURSES C ON C.COURSE_ID = R.COURSE_ID
		GROUP BY C.COURSE_ID, C.COURSE_NAME,C.COURSE_PRICE,C.COURSE_IMG
		ORDER BY COUNT(*) DESC, C.COURSE_ID)
		WHERE ROWNUM <![CDATA[<=]]> 4
	</select>
	
	<select id="itRandomCourseList" resultType="co.four.study.course.service.CourseVO">
	  <![CDATA[
	    SELECT * FROM (
	      SELECT C.COURSE_ID, C.COURSE_NAME, C.COURSE_PRICE, C.COURSE_IMG
	      FROM COURSES C
	      WHERE C.COURSE_MAIN_CATEGORY = 'it'
	      ORDER BY DBMS_RANDOM.VALUE
	    )
	    WHERE ROWNUM <= 4
	  ]]>
	</select>
	
	<select id="subCategoriesBymain" parameterType="co.four.study.course.service.CourseVO" resultType="String">
		SELECT DISTINCT COURSE_SUB_CATEGORY FROM COURSES WHERE COURSE_MAIN_CATEGORY=#{courseMainCategory}
	</select>
</mapper>